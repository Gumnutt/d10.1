<?php

use Drupal\Core\Url;
use Drupal\views\Entity\View;

function sakt_preprocess_page(&$variables) {
  if (getenv('LANDO_INFO')) {
    $variables['#attached']['library'][] = 'sakt/live-reload';
  }
}

function sakt_preprocess_paragraph(&$variables){
  $paragraph = $variables['paragraph'];

  //Graphs
  if ($paragraph->bundle() == 'data_graph') {
    $id =  $paragraph->get('field_view')->getValue()[0]['target_id']; // view id
    $display_id = $paragraph->get('field_view')->getValue()[0]['display_id']; //a views specific display id
    $view = View::load($id)->get('display'); //specific display object
    $title = $view[$display_id]['display_title']; // title of specific display
    $type = $variables['elements']['field_type'][0]["#markup"]; // type of graph
    $library = $paragraph->field_js_library[0]->value; // js library

    $allDisplays = []; // getting all displays from view
    foreach ($view as $key => $display) {
      if ($display['display_plugin'] == 'rest_export') {
        $allDisplays[$display["display_options"]["path"]] = $display['display_title'];
      }
    }

    $allTypes = []; // getting all types from paragraph field
    $types = $paragraph->field_type->getSetting('allowed_values');
    foreach ($types as $key => $value) {
      $allTypes["#".$key] = $value;
    }

    $url = Url::fromUri(_sakt_build_endpoint_url($id, $display_id)); // get url from specific display
    $variables['g_json'] = _sakt_get_json_data($url);
    $variables['g_title'] = $title;
    $variables['g_id'] = $id;
    $variables['g_type'] = $type;
    $variables['g_path'] = $url;
    $variables['g_library'] = $library;
    $variables['g_display_id'] = $display_id;
    $variables['g_all_types'] = json_encode($allTypes);
    $variables['g_all_displays'] = json_encode($allDisplays);
  }

  // ERF projects register
  if ($paragraph->bundle() == 'csv_subset') {
    $node = \Drupal::routeMatch()->getParameter('node');
    $node_path = $node->toUrl()->toString();
    $variables['node_path'] = $node_path;

    $filepath = $paragraph->field_direct_csv->entity->getFileUri();
    $variables['json'] = _sakt_csv_to_json($filepath);

    if ($node_path == "/project") {
      $current_url = \Drupal::request()->getUri();
      $query_string = parse_url($current_url, PHP_URL_QUERY);
      parse_str($query_string, $query_params);
      $filter = $query_params['pid']; //?pid=ERF101930

      $json_string = _sakt_csv_to_json($filepath);
      $csv_data_object = json_decode($json_string, true);
      $filtered_data = array_filter($csv_data_object, function($row) use ($filter) {
        return $row['project_id'] == $filter;
      });
      $variables['json'] = json_encode(reset($filtered_data));
    }
  }
}

// preprocess file
function sakt_preprocess_file_link(&$variables) {
  $uri = $variables['file']->getFileUri();
  $extension = pathinfo($uri, PATHINFO_EXTENSION);

  if ($extension == 'kml') {
    $variables['kml_data'] = file_get_contents($uri);
  }
}

// create new template suggestion for file link
function sakt_theme_suggestions_file_link_alter(array &$suggestions, array $variables) {
  $uri = $variables['file']->getFileUri();
  $extension = pathinfo($uri, PATHINFO_EXTENSION);
  $suggestions[] = 'file_link__' . $extension;
}

// should return a URL to the REST API endpoint for a view
function _sakt_build_endpoint_url($view_id, $view_display_id){
  $url = Url::fromRoute('view.' . $view_id . '.' . $view_display_id);
  $url->setAbsolute();
  return $url->toString();
}

function _sakt_get_json_data($url){
  $response = \Drupal::httpClient()->get($url->toString());
  if ($response->getStatusCode() !== 200) {
    return null;
  }
  $jsonString = json_encode($response->getBody()->getContents());
  $jsonData = json_decode($jsonString, TRUE);
  return $jsonData;
}

function _sakt_csv_to_json($file){
  $csv = fopen($file, 'r');
  $rows = array();
  $headers = fgetcsv($csv);
  $headers = array_map('_sakt_to_snake_case', $headers);
  while ($row = fgetcsv($csv)) {
    $row = array_map(function($field) {
      return mb_convert_encoding($field, 'UTF-8');
    }, $row);
    $rows[] = array_combine($headers, $row);
  }

  // Convert the array into a JSON string
  $json = json_encode($rows, JSON_PRETTY_PRINT);
  if ($json) {
    // Save the JSON string to a file
    return $json;
  } else {
      // json_encode() failed. Check the error message
      echo json_last_error_msg();
  }
}

function _sakt_to_snake_case($str) {
  $str = preg_replace('~[^\pL\d]+~u', '_', $str);
  $str = iconv('utf-8', 'us-ascii//TRANSLIT', $str);
  $str = preg_replace('~[^-\w]+~', '', $str);
  $str = trim($str, '_');
  $str = strtolower($str);
  $str = preg_replace('~\s+~', '_', $str);

  return $str;
}
