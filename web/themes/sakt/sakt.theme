<?php

use Drupal\Core\Url;

function sakt_preprocess_page(&$variables) {
  if (getenv('LANDO_INFO')) {
    $variables['#attached']['library'][] = 'sakt/live-reload';
  }
}

function sakt_preprocess_paragraph(&$variables){
  $paragraph = $variables['paragraph'];

  if ($paragraph->bundle() == 'data_graph') {
    $id = $variables['elements']['field_view'][0]["#view_id"]; // view id
    $display_id = $variables['elements']['field_view'][0]["#display_id"]; //a views specific display id
    $view = \Drupal\views\Entity\View::load($id)->get('display'); //specific display object
    $title = $view[$display_id]['display_title']; // title of specific display
    $path = $view[$display_id]['display_options']['path']; // path of specific display
    $type = $variables['elements']['field_type'][0]["#markup"]; // type of graph
    $library = $paragraph->field_js_library[0]->value; // js library

    $allDisplays = []; // getting all displays from view
    foreach ($view as $display_id => $display) {
      if ($display['display_plugin'] == 'rest_export') {
        $allDisplays["#".$display["id"]] = $display['display_title'];
      }
    }

    $allTypes = []; // getting all types from paragraph field
    $types = $paragraph->field_type->getSetting('allowed_values');
    foreach ($types as $key => $value) {
      $allTypes["#".$key] = $value;
    }

    $url = Url::fromUri('http://drupal.lndo.site/' . $path); // get url from specific display
    $response = \Drupal::httpClient()->get($url->toString()); // Fetch the JSON data from the JSON:API endpoint.
    if ($response->getStatusCode() === 200) { // Check if the request was successful (HTTP status code 200).
      $jsonString = json_encode($response->getBody()->getContents()); // Get the JSON response as a string.
      $jsonData = json_decode($jsonString, TRUE); // Convert the JSON string to an associative array using Drupal's JSON decoder.

      $variables['g_json'] = $jsonData;
      $variables['g_title'] = $title;
      $variables['g_id'] = $id;
      $variables['g_type'] = $type;
      $variables['g_library'] = $library;
      $variables['g_display_id'] = $display_id;
      $variables['g_all_types'] = json_encode($allTypes);
      $variables['g_all_displays'] = json_encode($allDisplays);
    }
  }
}

// preprocess file
function sakt_preprocess_file_link(&$variables) {
  $uri = $variables['file']->getFileUri();
  $extension = pathinfo($uri, PATHINFO_EXTENSION);

  if ($extension == 'kml') {
    $variables['kml_data'] = file_get_contents($uri);
  }
}

// create new template suggestion for file link
function sakt_theme_suggestions_file_link_alter(array &$suggestions, array $variables) {
  $uri = $variables['file']->getFileUri();
  $extension = pathinfo($uri, PATHINFO_EXTENSION);
  $suggestions[] = 'file_link__' . $extension;
}
